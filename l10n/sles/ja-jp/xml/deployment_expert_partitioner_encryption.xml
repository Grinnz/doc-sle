<?xml version="1.0" encoding="UTF-8"?>
<sect1 xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="deployment_expert_partitioner_encryption.xml" version="5.0" xml:id="deployment-encryption" os="sles;sled;osuse">
  <title>デバイスの暗号化</title>

  <info>
    <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
      <dm:bugtracker/>
      <dm:translation>yes</dm:translation>
    </dm:docmanager>
  </info>

  <para>
    Linux Unified Key Setup (LUKS)は、Linuxのディスク暗号化標準です。標準化されたディスク上のフォーマットを提供し、ユーザがデータをシームレスに転送または移行できるようにします。
  </para>
  <para>
    LUKSはブロックデバイスの暗号化に使用されます。暗号化されたデバイス内の内容は任意であるため、スワップパーティションを含むあらゆるファイルシステムを暗号化できます。暗号鍵やパラメータなど(暗号の種類や鍵サイズなど)の必要なセットアップ情報はすべてパーティションヘッダ内に保存されます。
  </para>
  <para>
    暗号化はマルチレイヤアプローチで実施されます。最初に、マスタキーを使用してブロックデバイスが暗号化されます。次に、このマスタキーがそれぞれ有効なユーザキーで暗号化されます。ユーザキーは、パスフレーズ、FIDO2セキュリティキー、TPM、またはスマートカードから生成されます。このマルチレイヤアプローチにより、ユーザはブロックデバイス全体を再暗号化することなくパスフレーズを変更することができます。
  </para>
  <para>
    LUKSの詳細については<xref linkend="cha-configure-cryptctl"/>を参照してください。
  </para>

  <sect2 xml:id="deployment-encryption-methods">
    <title>暗号化方式</title>
    <para>
      デバイスを暗号化するには、<xref linkend="sec-expert-partitioner-options"/>の手順に従ってください。
    </para>
    <tip>
      <title>YaSTでのLUKS2サポートの有効化</title>
      <para>
        LUKS2暗号化は、SUSE Linux Enterprise 15 SP4以降のYaSTパーティション設定でサポートされていますが、明示的に有効にする必要があります。これには2通りの方法があります。
      </para>
      <orderedlist>
        <listitem>
          <para>
            ブート時に設定する場合は、カーネルコマンドラインに対して<literal>YAST_LUKS2_AVAILABLE</literal>パラメータを追加します。ブートパラメータについては、<xref linkend="cha-boot-parameters"/>を参照してください。
          </para>
        </listitem>
        <listitem>
          <para>
            YaST設定でのインストール時に設定する場合:
          </para>
          <itemizedlist>
            <listitem>
              <para>
                グラフィカルインタフェースでは、<keycombo><keycap>Ctrl</keycap><keycap>Alt</keycap>
                  <keycap>Shift</keycap><keycap>C</keycap></keycombo>を押します。
              </para>
            </listitem>
            <listitem>
              <para>
                テキストインタフェースでは、<keycombo><keycap>Ctrl</keycap><keycap>D</keycap></keycombo>を押してから、<keycombo><keycap>Shift</keycap><keycap>C</keycap></keycombo>を押します。
              </para>
            </listitem>
          </itemizedlist>
          <para>
            ［<literal>Enable Experimental LUKS2 Encryption Support</literal> (実験中のLUKS2暗号化サポートの有効化)］をオンにし、［<literal>OK</literal>］を押して設定画面を閉じます。
          </para>
        </listitem>
      </orderedlist>
    </tip>
    <para>
      LUKS2サポートを有効化しない場合、<guimenu>暗号化方式</guimenu>の選択は表示されず、暗号化パスワードの入力のみが必要となります。
    </para>
    <variablelist xml:id="vl-encryption-methods">
      <varlistentry>
        <term><guimenu>通常のLUKS1</guimenu></term>
        <listitem>
          <para>
            この方式では、LUKS1を使用してデバイスを暗号化できます。暗号化パスワードを指定する必要があります。追加のパスワード(合計8つまで)は、後で<command>cryptsetup luksAddKey</command>を使用して追加できます。
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><guimenu>通常のLUKS2</guimenu></term>
        <listitem>
          <para>
            LUKS2は、破損に強い新しいバージョンのヘッダ形式を使用し、最大32個のユーザキーとデバイスラベルをサポートします。暗号化パスワード、およびそのパスフレーズを保護するために使用されるパスワードベースの鍵導出関数(PBKDF)を指定する必要があります(<xref linkend="deployment-encryption-pbkdf"/>を参照)。
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><guimenu>Pervasive LUKS2 (全方位型LUKS2)</guimenu> (IBM Zのみ)</term>
        <listitem>
          <para>
            この方式では、CCAモードで設定されたCrypto Express暗号化コプロセッサで処理されたマスタセキュアキーで、LUKS2を使用してデバイスを暗号化できます。暗号化システムにこのボリュームに関連付けられているセキュアキーがすでに含まれている場合、そのキーが使用されます。含まれていない場合、新しいセキュアキーが生成され、システムに登録されます。そのマスタキーへのアクセスを保護するために使用される暗号化パスワードを指定する必要があります。さらに、システム内にいくつかのAPQNがある場合は、使用する対象を選択できます。
          </para>
          <para>
            全方位型暗号化の詳細については、<link xlink:href="https://www.ibm.com/docs/en/linux-on-systems?topic=security-pervasive-encryption"/>を参照してください。
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><guimenu>揮発性の乱数鍵による暗号化</guimenu> (スワップデバイスのみ)</term>
        <listitem>
          <para>
            この方式では、ブート時にランダムに生成された鍵でスワップデバイスを暗号化します。したがって、ハードディスクへのハイバーネーションはサポートされません。スワップデバイスは起動のたびに再暗号化され、それ以前の内容は破棄されます。データの損失を回避するため、ご使用のシステムでハイバーネーションを無効にし、代わりにシャットダウンするように設定してください。
          </para>
          <para>
            スワップデバイスが再暗号化されるたびに、暗号鍵に加えて、デバイスラベルとUUIDが変化するため、どちらもランダムに暗号化されたスワップデバイスをマウントする有効なオプションではありません。そのため、<filename>/etc/crypttab</filename>ファイル内では、スワップデバイスが、再起動ごとに変化しない一定の名前で参照されるようにしてください。たとえば、スワップパーティションでは、パーティションのデバイス名ではなく、udevのデバイスIDやパスを使用する方が安全です。そのデバイス名は、次のブート時に別のパーティションに割り当てられる可能性があるからです。そうなると、そのスワップデバイスではなく、間違ったデバイスを暗号化してしまう可能性があります。
          </para>
          <para>
            YaSTは、デバイス名を常に使用するように設定した場合(パーティション設定の<guimenu>設定</guimenu>セクションを参照)を除き、<filename>/etc/crypttab</filename>内で変化しない名前を使用しようとします。ただし、一部のデバイスの場合、完全に変化しない名前を見つけることができない場合があります。揮発性の鍵による暗号化は、その影響についてよく理解したうえで使用してください。
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><guimenu>Protected Swap (保護されたスワップ)</guimenu> (スワップデバイスのみ)</term>
        <listitem>
          <para>
            この方式では、暗号化コプロセッサを必要とせずに、揮発性保護AES鍵でスワップデバイスを暗号化します。これは<literal>Encryption with
              Volatile Random Key</literal>方式の改良版ですが、この方式に関するすべての考慮事項が引き続き適用されます。
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><guimenu>Secure Swap (セキュアスワップ)</guimenu> (スワップデバイスのみ)</term>
        <listitem>
          <para>
            この方式では、暗号化コプロセッサから生成された揮発性のセキュアAES鍵でスワップデバイスを暗号化します。これは<literal>Encryption with
              Volatile Random Key</literal>方式の改良版ですが、この方式に関するすべての考慮事項が引き続き適用されます。
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect2>

  <sect2 xml:id="deployment-encryption-pbkdf">
    <title>パスワードベースの鍵導出関数</title>
    <para>
      使用するパスワードベースの鍵導出関数(PBKDF)は、コンテキスト、ハードウェアの性能、および他のシステムコンポーネントとの互換性要求レベルによって異なります。
    </para>
    <variablelist xml:id="vl-pbkdf">
      <varlistentry>
        <term>PBKDF2</term>
        <listitem>
          <para>
            <literal>PBKDF2</literal>は、LUKS1が使用する関数です。これは<link xlink:href="https://tools.ietf.org/html/rfc2898">RFC 2898</link>で規定されています。
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Argon2i</term>
        <listitem>
          <para>
            Argon2は、より安全性を高めるように、また計算に多くのメモリを必要とするように設計された関数です。これは<link xlink:href="https://tools.ietf.org/html/rfc9106">RFC 9106</link>で規定されています。Argon2iは、パスワードに依存しない形式でメモリ配列にアクセスすることで、サイドチャネル攻撃に対する耐性を持つように最適化されたArgon2の派生形です。
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Argon2id</term>
        <listitem>
          <para>
            Argon2idはArgon2のハイブリッド版です。メモリ上の最初の半分のパスではArgon2iアプローチに従い、それ以降のパスではGPUクラッキング攻撃を抑えるようにArgon2d (YaSTではサポートされていない)アプローチに従います。RFC 9106では、タイプの違いがわからない場合や、サイドチャネル攻撃が現実的な脅威であると考えられる場合は、Argon2idを使用することを推奨しています。
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
    <para>
      <literal>Argon2</literal>の方がより安全ですが、<literal>PBKDF2</literal>の使用例も依然としてあります。
    </para>
    <itemizedlist>
      <listitem>
        <para>
          意図的なセキュリティ機能として、Argon2は計算により多くのメモリを必要とします。この結果、一部のシステムで問題が発生する場合があります。パスワードの強度が十分に確保される場合は、PBKDF2を使用した方が安全で、メモリを節約できる可能性があります。
        </para>
      </listitem>
      <listitem>
        <para>
          <systemitem>grub2</systemitem>は、PBKDF2が使用される場合にのみ、LUKS2で暗号化されたデバイスからの起動を限定的にサポートしています。これは、<filename>/boot</filename>ディレクトリを含むファイルシステムにArgon2を使用できないことを意味します。PBKDF2が使用される場合でも、LUKS2デバイスから起動するためには、いくつかの手動による<systemitem>grub2</systemitem>設定が必要な場合があることに注意してください。
        </para>
      </listitem>
    </itemizedlist>
    
    <para>
      LUKSによるデバイス暗号化の設定に関する詳細については、インストーラの［<literal>Help</literal> (ヘルプ)］ボタンを使用し、<xref linkend="cha-configure-cryptctl"/>を参照してください。
    </para>
  </sect2>
</sect1>
