<?xml version="1.0" encoding="UTF-8"?>
<sect1 xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="deployment_expert_partitioner_encryption.xml" version="5.0" xml:id="deployment-encryption" os="sles;sled;osuse">
  <title>Criptografia do dispositivo</title>

  <info>
    <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
      <dm:bugtracker/>
      <dm:translation>yes</dm:translation>
    </dm:docmanager>
  </info>

  <para>
    O Linux Unified Key Setup (LUKS) é o padrão para criptografia de disco do Linux. Ele fornece um formato em disco padronizado e permite que os usuários transportem ou migrem os dados de maneira contínua.
  </para>
  <para>
    O LUKS é usado para criptografar dispositivos de blocos. O conteúdo do dispositivo criptografado é arbitrário e, portanto, qualquer sistema de arquivos pode ser criptografado, incluindo partições de troca (swap). Todas as informações de configuração necessárias, como chaves criptográficas, e parâmetros, por exemplo, tipo de cifra e tamanho da chave, são armazenadas no cabeçalho da partição.
  </para>
  <para>
    A criptografia é feita com uma abordagem de várias camadas. Primeiro, o dispositivo de blocos é criptografado usando uma chave mestra. Em seguida, essa chave mestra é criptografada com as chaves ativas de cada usuário. As chaves de usuário são derivadas de frases secretas, chaves de segurança FIDO2, TPMs ou smart cards. Essa abordagem de várias camadas permite que os usuários mudem sua frase secreta sem recriptografar o dispositivo de blocos inteiro.
  </para>
  <para>
    Para obter mais informações sobre a LUKS, consulte o <xref linkend="cha-configure-cryptctl"/>.
  </para>

  <sect2 xml:id="deployment-encryption-methods">
    <title>Métodos de criptografia</title>
    <para>
      Para criptografar um dispositivo, siga as instruções na <xref linkend="sec-expert-partitioner-options"/>.
    </para>
    <tip>
      <title>Habilitando o suporte a LUKS2 no YaST</title>
      <para>
        A criptografia LUKS2 é suportada pelo Particionador do YaST a partir do SUSE Linux Enterprise 15 SP4, mas precisa ser habilitada explicitamente. Isso pode ser feito de duas maneiras:
      </para>
      <orderedlist>
        <listitem>
          <para>
            No momento da inicialização, adicionando o parâmetro à linha de comando do kernel <literal>YAST_LUKS2_AVAILABLE</literal>. Para obter informações sobre os parâmetros de boot, consulte o <xref linkend="cha-boot-parameters"/>.
          </para>
        </listitem>
        <listitem>
          <para>
            Durante a instalação na configuração do YaST:
          </para>
          <itemizedlist>
            <listitem>
              <para>
                Na interface gráfica, pressione <keycombo><keycap>Ctrl</keycap><keycap>Alt</keycap>
                  <keycap>Shift</keycap><keycap>C</keycap></keycombo>.
              </para>
            </listitem>
            <listitem>
              <para>
                Na interface de texto, pressione <keycombo><keycap>Ctrl</keycap><keycap>D</keycap></keycombo> e, depois, <keycombo><keycap>Shift</keycap><keycap>C</keycap></keycombo>.
              </para>
            </listitem>
          </itemizedlist>
          <para>
            Marque <literal>Enable Experimental LUKS2 Encryption Support</literal> e saia da tela de configuração com <literal>OK</literal>.
          </para>
        </listitem>
      </orderedlist>
    </tip>
    <para>
      Se você não habilitar o suporte a LUKS2, a seleção do <guimenu>Método de criptografia</guimenu> não estará visível, e você só precisará digitar a senha de criptografia.
    </para>
    <variablelist xml:id="vl-encryption-methods">
      <varlistentry>
        <term><guimenu>LUKS1 Regular</guimenu></term>
        <listitem>
          <para>
            Esse método permite criptografar o dispositivo usando LUKS1. Você precisa inserir a senha de criptografia. É possível adicionar outras senhas (até oito no total) posteriormente com o comando <command>cryptsetup luksAddKey</command>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><guimenu>LUKS2 Regular</guimenu></term>
        <listitem>
          <para>
            O LUKS2 usa uma versão mais recente do formato de cabeçalho, que é resiliente a corrompimento e suporta até 32 chaves de usuário e rótulos de dispositivo. Você precisa inserir a senha de criptografia e a função de derivação de chave baseada em senha (PBKDF) que serão usadas para proteger essa frase secreta (consulte a <xref linkend="deployment-encryption-pbkdf"/>).
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><guimenu>LUKS2 Pervasivo</guimenu> (apenas no IBM Z)</term>
        <listitem>
          <para>
            Esse método permite criptografar o dispositivo usando LUKS2 com uma chave mestra segura processada por um coprocessador criptográfico Crypto Express configurado no modo CCA. Se o sistema criptográfico já incluir uma chave segura associada a esse volume, essa chave será usada. Do contrário, uma nova chave segura será gerada e registrada no sistema. Você precisa inserir uma senha de criptografia que será usada para proteger o acesso a essa chave mestra. Além disso, quando há vários APQNs no sistema, você pode selecionar os que deseja usar.
          </para>
          <para>
            Para obter mais informações sobre criptografia pervasiva, acesse <link xlink:href="https://www.ibm.com/docs/en/linux-on-systems?topic=security-pervasive-encryption"/>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><guimenu>Criptografia com chave aleatória volátil</guimenu> (apenas para dispositivos de troca)</term>
        <listitem>
          <para>
            Esse método criptografa um dispositivo de troca com uma chave gerada aleatoriamente na inicialização e, portanto, não suporta a hibernação no disco rígido. O dispositivo de troca é recriptografado a cada inicialização, e seu conteúdo anterior é destruído. Para evitar perda de dados, desabilite a hibernação e, em vez disso, configure o sistema para ser encerrado.
          </para>
          <para>
            Além da chave de criptografia, o rótulo e o UUID do dispositivo mudam toda vez que a troca é recriptografada, portanto, nenhuma opção é válida para montar um dispositivo de troca criptografado aleatoriamente. Verifique se o nome do dispositivo de troca é estável, sem estar sujeito a mudanças a cada reinicialização no arquivo <filename>/etc/crypttab</filename>. Por exemplo, para uma partição de troca, é mais seguro usar o ID ou o caminho do dispositivo udev em vez do nome do dispositivo da partição, pois esse nome de dispositivo pode ser atribuído a uma partição diferente durante a próxima inicialização. Se isso acontecer, um dispositivo errado poderá ser criptografado no lugar do dispositivo de troca.
          </para>
          <para>
            O YaST tenta usar nomes estáveis em <filename>/etc/crypttab</filename>, a menos que ele esteja configurado para sempre usar nomes de dispositivos (consulte a seção <guimenu>Configurações</guimenu> do particionador). No entanto, para alguns dispositivos, talvez não seja possível encontrar um nome totalmente estável. Use a criptografia com chaves voláteis apenas se tiver certeza das implicações.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><guimenu>Troca Protegida</guimenu> (apenas para dispositivos de troca)</term>
        <listitem>
          <para>
            Esse método criptografa um dispositivo de troca com uma chave AES protegida e volátil, sem exigir um coprocessador criptográfico. Trata-se de uma melhoria em relação ao método <literal>Encryption with
              Volatile Random Key</literal>, e todas as considerações referentes a esse método ainda se aplicam.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><guimenu>Troca Segura</guimenu> (apenas para dispositivos de troca)</term>
        <listitem>
          <para>
            Esse método criptografa um dispositivo de troca com uma chave AES segura e volátil, gerada de um coprocessador criptográfico. Trata-se de uma melhoria em relação ao método <literal>Encryption with
              Volatile Random Key</literal>, e todas as considerações referentes a esse método ainda se aplicam.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect2>

  <sect2 xml:id="deployment-encryption-pbkdf">
    <title>Funções de derivação de chave baseada em senha</title>
    <para>
      A função de derivação de chave baseada em senha (PBKDF) a ser usada depende do contexto, dos recursos de hardware e do nível necessário de compatibilidade com outros componentes do sistema:
    </para>
    <variablelist xml:id="vl-pbkdf">
      <varlistentry>
        <term>PBKDF2</term>
        <listitem>
          <para>
            <literal>PBKDF2</literal> é a função usada por LUKS1. Ela é definida em <link xlink:href="https://tools.ietf.org/html/rfc2898">RFC 2898</link>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Argon2i</term>
        <listitem>
          <para>
            Argon2 é uma função desenvolvida para ser mais segura e exigir muita memória para ser processada. Ela é definida em <link xlink:href="https://tools.ietf.org/html/rfc9106">RFC 9106</link>. Argon2i é uma variante de Argon2 otimizada para resistir a ataques de canal lateral por meio do acesso à matriz de memória em uma ordem independente de senha.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Argon2id</term>
        <listitem>
          <para>
            Argon2id é uma versão híbrida de Argon2. Ele segue a abordagem do Argon2i para a primeira metade da passagem de memória, e a abordagem do Argon2d (não suportado pelo YaST) para limitar os ataques de cracking de GPU para as passagens subsequentes. O RFC 9106 recomenda o uso do Argon2id se você não sabe a diferença entre os tipos ou se considera os ataques de canal lateral uma ameaça viável.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
    <para>
      O <literal>Argon2</literal> é mais seguro, mas ainda há casos de uso para o <literal>PBKDF2</literal>:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Como um recurso de segurança intencional, o Argon2 requer muito mais memória para ser processado. Alguns sistemas podem ter problemas por causa disso. Se for possível garantir totalmente a força da senha, o uso do PBKDF2 ainda poderá ser seguro e economizar memória.
        </para>
      </listitem>
      <listitem>
        <para>
          O <systemitem>grub2</systemitem> oferece suporte limitado para boot de dispositivos criptografados com LUKS2, mas apenas quando o PBKDF2 é usado. Isso significa que você não pode usar o Argon2 em um sistema de arquivos que contém o diretório <filename>/boot</filename>. Mesmo que o PBKDF2 seja usado, observe que talvez seja necessária uma configuração manual do <systemitem>grub2</systemitem> para boot de um dispositivo LUKS2.
        </para>
      </listitem>
    </itemizedlist>
    
    <para>
      Para obter mais informações sobre como configurar a criptografia de dispositivo com LUKS, use o botão <literal>Help</literal> no instalador e consulte o <xref linkend="cha-configure-cryptctl"/>.
    </para>
  </sect2>
</sect1>
