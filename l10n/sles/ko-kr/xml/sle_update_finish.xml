<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="sle_update_finish.xml" version="5.0" xml:id="cha-upgrade-finish">
 <title>업그레이드 완료</title>
 <info>
  <abstract>
   <para>
    업그레이드한 후에는 일부 추가 작업을 수행해야 합니다. 다음 장에서는 이러한 단계를 안내합니다.
   </para>
  </abstract>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

 <sect1 xml:id="sec-upgrade-finish-old-packages">
  <title>이전 패키지 확인</title>
  <para>
   <command>zypper packages</command>를 사용하여 독립 패키지와 불필요한 패키지를 확인합니다.
  </para>
  <para>
   독립 패키지는 구성된 패키지 리포지토리에서 더 이상 사용할 수 없습니다. 더 이상 업데이트할 수 없으며 지원되지 않습니다.
  </para>
  <para>
   독립 패키지 목록을 확인하려면 다음을 실행합니다.
  </para>
<screen><prompt>&gt; </prompt><command>zypper packages --orphaned</command></screen>
  <para>
   불필요한 패키지는 사용자가 명시적으로 설치했거나 암시적으로 패턴이나 제품의 일부로 설치된 패키지의 종속성이며, 그 사이에 제거된 패키지입니다. 일반적으로 해당 패키지는 더 이상 필요하지 않으므로 마찬가지로 제거해야 합니다.
  </para>
  <para>
   불필요한 패키지 목록을 확인하려면 다음을 실행합니다.
  </para>
<screen><prompt>&gt; </prompt><command>zypper packages --unneeded</command></screen>
  <tip>
   <para>
    불필요한 패키지를 방지하려면 패키지를 삭제할 때 <command>zypper rm</command>을 <option>--clean-deps</option> 옵션과 함께 사용하거나 <menuchoice>
     <guimenu>옵션</guimenu><guimenu>패키지 삭제 시 정리</guimenu></menuchoice>가 활성화된 YaST를 사용합니다.
   </para>
  </tip>
  <para>
   다음을 실행하여 두 목록을 하나로 결합할 수 있습니다.
  </para>
<screen><prompt>&gt; </prompt><command>zypper packages --orphaned --unneeded</command></screen>
  <para>
   이 목록에서 아직 필요한 패키지와 제거해도 안전한 패키지를 판단할 수 있습니다.
  </para>
  <warning>
   <title>필요한 패키지를 제거하지 마십시오.</title>
   <para>
    패턴 또는 제품에서 패키지의 이름이 변경되거나 패키지가 제거된 경우, <command>zypper</command>는 해당 패키지가 여전히 설치에 중요하더라도 더 이상 명시적으로 설치된 패키지가 아닌 불필요한 패키지로 표시할 수 있습니다.
   </para>
   <para>
    그러므로 제거할 패키지 목록을 주의 깊게 검토하십시오.
   </para>
  </warning>
  <para>
   단일 명령으로 독립 패키지 및 불필요한 패키지를 모두 제거하려면 다음을 실행합니다.
  </para>
<screen><prompt>&gt; </prompt><command>sudo</command> <command>zypper rm $(zypper --no-refresh packages --orphaned --unneeded | gawk '{print $5}' | tail -n +5)</command></screen>
  <para>
   단일 패키지 또는 패턴을 제거 대상에서 제외하려면 다음을 추가합니다.
  </para>
<screen><prompt>&gt; </prompt><command>sudo</command> <command>zypper rm $(zypper --no-refresh packages --orphaned --unneeded | gawk '{print $5}' | tail -n +5 | grep -v <replaceable>PACKAGE_TO_EXCLUDE</replaceable>)</command></screen>
  <para>
   다수의 패키지를 제외하려면 텍스트 파일에 newline으로 구분하여 입력하고 명령에 다음을 추가합니다.
  </para>
  <screen><prompt>&gt; </prompt><command>sudo</command> <command>zypper rm $(zypper --no-refresh packages --orphaned --unneeded | gawk '{print $5}' | tail -n +5 | grep -v -f <replaceable>/PACKAGES/TO/KEEP.txt</replaceable>)</command></screen>
 </sect1>
 <sect1 xml:id="sec-uggrade-finish-config-files">
  <title>구성 파일을 검토합니다.</title>
  <para>
   <filename>*.rpmnew</filename> 및 <filename>*.rpmsave</filename> 파일을 확인합니다. 패키지 설치 후 변경된 기본 구성 파일에 대한 변경 사항이 업그레이드에 포함된 경우 파일을 덮어쓰는 대신 이러한 파일 유형 중 하나가 생성됩니다. <filename>*.rpmnew</filename>에는 새로운 기본 구성이 포함되고 변경된 파일을 그대로 유지하지만, <filename>*.rpmsave</filename>는 새 기본 파일로 교체된 변경된 구성의 사본입니다.
  </para>
  <para>
   이러한 파일이 발견되면 컨텐트를 검사하고 올바른 변경 사항을 병합하십시오. 전체 파일 시스템을 검색할 필요가 없으며 <filename>/etc</filename> 디렉토리만 검색하면 됩니다. 다음 명령을 사용합니다.
  </para>
<screen><prompt>&gt; </prompt><command>find /etc/ -name "*.rpmnew" -o -name "*.rpmsave"</command></screen>
 </sect1>

 
 <sect1 xml:id="sec-upgrade-finish-python3">
  <title><literal>Python 3</literal> 모듈 활성화</title>
  <para>
   <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 15에서는 기본적으로 Python 3.6을 사용합니다. Python 3.9는 <phrase role="productname"><phrase os="sles">SLES</phrase></phrase> 15 SP3에 최신 대체 방법으로 추가되었습니다. 이 버전은 <phrase role="productname"><phrase os="sles">SLES</phrase></phrase> 15 SP4부터 더 이상 지원되지 않습니다. 대신, 중요 업데이트 및 보안 수정이 포함된 최신 버전을 <literal>Python 3</literal>Python 모듈을 통해 사용할 수 있습니다.
  </para>
  <para>
   <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 15 SP3에 Python 3.9를 설치한 경우 다음을 수행하여 <literal>Python 3</literal> 모듈을 활성화합니다.
  </para>
<screen><prompt>&gt; </prompt><command>sudo</command> <command>SUSEConnect -p sle-module-python3/15.6/<replaceable>x86_64</replaceable></command>&#x002E;</screen>
  <para>
   아니면 <command>zypper remove -u python39</command>를 사용하여 3.9를 제거하고 기본 Python 버전으로 되돌릴 수 있습니다.
  </para>
 </sect1>

 <sect1 xml:id="sec-upgrade-finish-xfs4">
  <title>XFS v4 장치 다시 포멧</title>
  <para>
   <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>는 XFS 파일 시스템의 <quote>온디스크 형식</quote>(v5)을 지원합니다. 이 형식의 주요 이점은 모든 XFS 메타 데이터의 자동 체크섬, 파일 형식 지원, 파일에 대한 더 많은 수의 액세스 제어 목록 지원을 제공한다는 점입니다.
  </para>
  <para>
   이 형식은 3.12 이전 버전의 SUSE Linux Enterprise 커널, 3.2.0 이전 버전의 <literal>xfsprogs</literal> 및 SUSE Linux Enterprise 12 이전에 릴리스된 GRUB 2 버전에서 지원되지 않습니다.
  </para>
  <important>
   <title>V4는 더 이상 사용되지 않음</title>
   <para>
    XFS에서는 V4 형식의 파일 시스템이 더 이상 사용되지 않습니다. 이 파일 시스템 형식은 다음 명령으로 생성되었습니다.
   </para>
<screen><prompt>&gt; </prompt><command>sudo</command> mkfs.xfs -m crc=0 <replaceable>DEVICE</replaceable></screen>
   <para>
    이 형식은 SLE 11 및 이전 릴리스에서 사용되었으며 현재 <command>dmesg</command> 명령으로 경고 메시지를 생성합니다.
   </para>
<screen>Deprecated V4 format (crc=0) will not be supported after September 2030</screen>
   <para>
    <command>dmesg</command> 명령의 출력으로 위의 메시지가 표시되면 파일 시스템을 V5 형식으로 업데이트하는 것이 좋습니다.
   </para>
   <procedure>
    <step>
     <para>
      다른 장치에 데이터를 백업합니다.
     </para>
    </step>
    <step>
     <para>
      장치에 파일 시스템을 생성합니다.
     </para>
<screen><prompt>&gt; </prompt><command>sudo</command> mkfs.xfs -m crc=1 <replaceable>DEVICE</replaceable></screen>
    </step>
    <step>
     <para>
      업데이트된 장치의 백업으로부터 데이터를 복원합니다.
     </para>
    </step>
   </procedure>
  </important>
 </sect1>
</chapter>
