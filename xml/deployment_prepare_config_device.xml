<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "generic-entities.ent">
    %entities;
]>
<chapter version="5.0" xml:id="cha-prepare-device"
 xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Preparing the configuration device</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info> 

 <para>
  The following procedure describes how to prepare the configuration device
  (usually a USB flash disk). Ensure that the configuration device is
  connected to your host running &slema; during its first boot.
 </para>
 <procedure xml:id="pro-preparing-configuration-device">
 &pro-preparing-configuration-device;
</procedure>

<section xml:id="sec-default-partitioning">
  <title>Default partitioning</title>

  <para>
   The pre-built images are delivered with a default partitioning scheme, which
   can be changed during the first boot by using Ignition or Combustion. For a
   procedure to repartition the system, refer to
   <xref linkend="sec-ignition-configuration"/> or
   <xref linkend="sec-combustion-script"/>.
  </para>

  <important>
   <title>Btrfs is mandatory for the root file system</title>
   <para>
    If you intend to perform any changes to the default partitioning scheme,
    the root file system must be Btrfs.
   </para>
  </important>

  <para>
   Each image has the following subvolumes:
  </para>

<screen>
 /home
 /root
 /opt
 /srv 
 /usr/local
 /var
 </screen>

  <para>
   The images also have mounted subvolumes for booting by default. The specific
   subvolumes differ according to the architecture.
  </para>

  <para>
   The <literal>/etc</literal> directory is mounted as OverlayFS, where the
   upper directory is mounted to <filename>/var/lib/overlay/1/etc/</filename>. For details, refer to <xref linkend="sec-etc-overlay"/>.
  </para>

  <para>
   You can recognize the subvolumes mounted by default by the option
   <literal>x-initrd.mount</literal> in <filename>/etc/fstab</filename>. Other
   subvolumes or partitions must be configured either by Ignition or
   Combustion.
  </para>
 </section>

<section xml:id="sec-about-ignition">
  <title>Configuring &productnameshort; using Ignition</title>

  <para>
    Ignition is a provisioning tool that enables you to configure a system
    according to your specification on the first boot. When the system is
    booted for the first time, Ignition is loaded as part of an
    <filename>initramfs</filename> and searches for a configuration file
    within a specific directory (on a USB flash drive, or you can provide a
    URL). All changes are performed before the kernel switches from the
    temporal file system to the real root file system (before the
    <literal>switch_root</literal> command is issued).
  </para>

  <para>
    Ignition uses a configuration file in the JSON format. The file is called
    <filename>config.ign</filename>.
  </para>

<section xml:id="sec-ignition-configuration">
  <title><filename>config.ign</filename></title>

  <para>
    <filename>config.ign</filename> is a JSON configuration file that
    provides prescriptions for Ignition. You can either create the file
    manually in JSON, or you can use the Fuel Ignition tool
    (<link xlink:href="https://opensuse.github.io/fuel-ignition/"/>) to
    generate a basic set of prescriptions. Bear in mind that the Fuel
    Ignition tool does not provide a full set of options, so you might have
    to modify the file manually.
  </para>

  
  <para>
    When installing on bare metal, the configuration file
    <filename>config.ign</filename> must reside in the
    <filename>ignition</filename> subdirectory on the configuration media
    labeled <literal>ignition</literal>. The directory structure must look as
    follows:
  </para>

<screen>
&lt;root directory&gt;
└── ignition
  └── config.ign

</screen>

  <para>
    If you intend to configure a QEMU/KVM virtual machine, provide the path
    to <filename>config.ign</filename> as an attribute of the
    <command>qemu</command> command. For example:
  </para>

<screen>
-fw_cfg name=opt/com.coreos/config,file=<replaceable>PATH_TO_config.ign</replaceable>
</screen>

<para condition="deployment-virtual-machine">
  When configuring a virtual machine with &vmm; (&libvirt;),
  provide the path to the <filename>config.ign</filename> file in its XML
  definition, for example:
</para>
<screen condition="deployment-virtual-machine">
&lt;domain ... >
&lt;sysinfo type="fwcfg">
&lt;entry name="opt/com.coreos/config" file="/location/to/config.ign"/>
&lt;/sysinfo>
&lt;/domain>
</screen>
<para>
  Alternatively, when using &libvirt;, you can provide the path as an option to the <command>virt-install</command> command:
</para>
<screen>--sysinfo type=fwcfg,entry0.name="opt/com.coreos/config",entry0.file="<replaceable>PATH_TO_config.ign</replaceable>>" </screen>

  <para>
    The <filename>config.ign</filename> file contains various data types: objects,
    strings, integers, Booleans and lists of objects. For a complete
    specification, refer to
    <link xlink:href="https://coreos.github.io/ignition/configuration-v3_3/">Ignition
    specification v3.3.0</link>.
  </para>

  <para>
    The <literal>version</literal> attribute is mandatory, and with
    &slema;, its value must be set either to <literal>3.3.0</literal> or to
    any lower version. Otherwise Ignition will fail.
  </para>

  <para>
    To log in to your system as root, you must at least include a
    password for &rootuser;. However, it is recommended to establish access
    via SSH keys. If you want to configure a password, make sure to use a
    secure one. If you use a randomly generated password, use at least 10
    characters. If you create your password manually, use even more than 10
    characters and combine uppercase and lowercase letters and numbers.
  </para>

  <section xml:id="sec-ignition-examples">
    <title>Configuration examples</title>
    <para>
      This section will provide you with some common examples of the Ignition
      configuration in the JSON format. 
    </para>
    <important>
      <title>Declaring content outside the default subvolumes</title>
      <para>
        Bear in mind that if you want to create files outside the
        <xref linkend="sec-default-partitioning" xrefstyle="template:default mounted directories"/>,
        you need to define the directories using the
        <literal>filesystem</literal> attribute.
      </para>
    </important>
    <note>
      <title>The <literal>version</literal> attribute is mandatory</title>
      <para>
        Include the version specification in <filename>config.ign</filename>
        (version 3.3.0 or lower).
      </para>
    </note>
    <section xml:id="sec-ignition-storage">
      <title>Storage configuration</title>
      <para>
        The <literal>storage</literal> attribute is used to configure
        partitions and RAID, define file systems, create files, etc. To define
        partitions, use the <literal>disks</literal> attribute. The
        <literal>filesystem</literal> attribute is used to format partitions
        and define mount points of particular partitions. The
        <literal>files</literal> attribute can be used to create files in the
        file system. Each of the mentioned attributes is described in the
        following sections.
      </para>
      <section xml:id="sec-storage-disks">
        <title>The <literal>disks</literal> attribute</title>
        <para>
          The <literal>disks</literal> attribute is a list of devices that
          enables you to define partitions on these devices. The
          <literal>disks</literal> attribute must contain at least one
          <literal>device</literal>. Other attributes are optional. The
          following example will use a single virtual device and divide the
          disk into four partitions:
        </para>
<screen>
  {
  "variant": "fcos",
  "version": "3.3.0",
  "storage": {
      "disks": [
          {
              "device": "/dev/vda",
              "wipe_table": true,
              "partitions": [
                  {
                      "label": "root",
                      "number": 1,
                      "type_guid": "4F68BCE3-E8CD-4DB1-96E7-FBCAF984B709"
                  },
                  {
                      "label": "boot",
                      "number": 2,
                      "type_guid": "BC13C2FF-59E6-4262-A352-B275FD6F7172"
                  },
                  {
                      "label": "swap",
                      "number": 3,
                      "type_guid": "0657FD6D-A4AB-43C4-84E5-0933C84B4F4F"
                  },
                  {
                      "label": "home",
                      "number": 4,
                      "type_guid": "933AC7E1-2EB4-4F13-B844-0E14E2AEF915"
                  }
              ]
          }
      ]
  }
}
   </screen>
        
      </section>
      <section xml:id="sec-storage-raid">
        <title>The <literal>raid</literal> attribute</title>
        <para>
          The <literal>raid</literal> is a list of RAID arrays. The following
          attributes of <literal>raid</literal> are mandatory:
        </para>
        <variablelist>
          <varlistentry>
            <term>level</term>
            <listitem>
              <para>
                a level of the particular RAID array (linear, raid0, raid1,
                raid2, raid3, raid4, raid5, raid6)
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>devices</term>
            <listitem>
              <para>
                a list of devices in the array referenced by their absolute
                paths
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>name</term>
            <listitem>
              <para>
                a name that will be used for the md device
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
<screen>
    {
  "variant": "fcos",
  "version": "3.3.0",
  "storage": {
      "raid": [
          {
              "name": "system",
              "level": "raid1",
              "devices": [
                  "/dev/sda",
                  "/dev/sdb"
              ]
          }
      ]
  }
}
   </screen>
        
      </section>
      <section xml:id="sec-storage-filesystem">
        <title>The <literal>filesystem</literal> attribute</title>
        <para>
          <literal>filesystem</literal> must contain the following
          attributes:
        </para>
        <variablelist>
          <varlistentry>
            <term>device</term>
            <listitem>
              <para>
                the absolute path to the device, typically
                <literal>/dev/sda</literal> in case of physical disk
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>format</term>
            <listitem>
              <para>
                the file system format (btrfs, ext4, xfs, vfat or swap)
              </para>
              <note>
                <para>
                  In the case of &slema;, the <literal>root</literal> file
                  system must be formatted to Btrfs.
                </para>
              </note>
            </listitem>
          </varlistentry>
        </variablelist>
        <para>
          The following example demonstrates using the
          <literal>filesystem</literal> attribute. The
          <filename>/opt</filename> directory will be mounted to the
          <literal>/dev/sda1</literal> partition, which is formatted to
          Btrfs. The partition table will not be erased.
        </para>
<screen>
{
  "variant": "fcos",
  "version": "3.3.0",
  "storage": {
      "filesystems": [
          {
              "path": "/opt",
              "device": "/dev/sda1",
              "format": "btrfs",
              "wipe_filesystem": false
          }
      ]
  }
}
</screen>
        
      </section>
      <section xml:id="sec-storage-files">
        <title>The <literal>files</literal> attribute</title>
        <para>
          You can use the <literal>files</literal> attribute to create any
          files on your machine. Bear in mind that if you want to create
          files outside the
          <xref linkend="sec-default-partitioning" xrefstyle="template:default mounted directories"/>,
          you need to define the directories by using the
          <literal>filesystem</literal> attribute.
        </para>
        <para>
          In the following example, a host name is created by using the
          <literal>files</literal> attribute. The file
          <filename>/etc/hostname</filename> will be created with the
          <emphasis>slemicro-1</emphasis> host name.
        </para>
        <note>
          <title>Decimal numeral systems in JSON </title>
          <para>
            Bear in mind that JSON uses the decimal numeral system, so the
            <literal>mode</literal> value is a decimal notation of the access
            rights. 
          </para>
        </note>
<screen>
{
  "variant": "fcos",
  "version": "3.3.0",
  "storage": {
      "files": [
          {
              "path": "/etc/hostname",
              "mode": 420,
              "overwrite": true,
              "contents": {
                  "inline": "slemicro-1"
              }
          }
      ]
  }
}
</screen>
        
      </section>
      <section xml:id="sec-storage-directories">
        <title>The <literal>directories</literal> attribute</title>
        <para>
          The <literal>directories</literal> attribute is a list of
          directories that will be created in the file system. The
          <literal>directories</literal> attribute must contain at least one
          <literal>path</literal> attribute.
        </para>
<screen>
{
  "variant": "fcos",
  "version": "3.3.0",
  "storage": {
      "directories": [
          {
              "path": "/mnt/backup",
              "user": {
                  "name": "tux"
              }
          }
      ]
  }
}
</screen>
       
      </section>
    </section>
    <section xml:id="sec-ignition-users">
      <title>Users administration</title>
      <para>
        The <literal>passwd</literal> attribute is used to add users. If you
        intend to log in to your system, create &rootuser; and set the
        &rootuser;'s password and/or add the SSH key to the Ignition
        configuration. You need to hash the &rootuser; password, for example,
        by using the <command>openssl</command> command:
      </para>
<screen>
openssl passwd -6
</screen>
      <para>
        The command creates a hash of the password you chose. Use this hash
        as the value of the <literal>password_hash</literal> attribute.
      </para>

      <para>
        The <literal>users</literal> attribute must contain at least one
        <literal>name</literal> attribute.
        <literal>ssh_authorized_keys</literal> is a list of SSH keys for the
        user.
      </para>
      <note>
        <title>Creating other users than &rootuser;</title>
        <para>
          When you are creating other users than &rootuser;, you need to
          define <filename>/home</filename> directories for the users,
          because these directories (usually
          <filename>/home/<replaceable>USER_NAME</replaceable></filename>)
          are not mounted by default. Therefore, declare these directories
          using the <literal>storage</literal>/<literal>filesystem</literal>
          attribute. For example, for &exampleuser_plain;, the example
          looks as follows:
        </para>
<screen>
      {
"ignition": {
  "version": "3.2.0"
},
"passwd": {
  "users": [
    {
      "name": "tux",
      "passwordHash": "$2a$10$US9XSqLOqMmGq/OnhlVjPOwuZREh2.iEtlwD5LI7DKgV24NJU.wO6"
    }
  ]
},
"storage": {
  "filesystems": [
    {
      "device": "/dev/disk/by-label/ROOT",
      "format": "btrfs",
      "mountOptions": [
        "subvol=/@/home"
      ],
      "path": "/home",
      "wipeFilesystem": false
    }
  ]
}
}
    </screen>
        
      </note>
    </section>
    <section xml:id="sec-ignition-systemd">
      <title>Enabling <literal>systemd</literal> services</title>
      <para>
        You can enable &systemd; services by specifying them in the
        <literal>systemd</literal> attribute. The <literal>name</literal>
        must be the exact name of a service to be enabled (including the
        suffix).
      </para>

<screen>
{
"ignition": {
  "version": "3.0.0"
},
"systemd": {
  "units": [
    {
      "enabled": true,
      "name": "sshd.service"
    }
  ]
}
}
</screen>     
    </section>
  </section>

  
</section>
</section>
<section xml:id="sec-about-combustion">
  <title>Configuring &productnameshort; using Combustion</title>

  <para>
   Combustion is a dracut module that enables you to configure your system on
   its first boot. Combustion reads a provided file called
   <filename>script</filename> and executes commands in it and thus performs
   changes to the file system. You can use Combustion to change the default
   partitions, set users' passwords, create files, install packages, etc.
  </para>

  <para>
   The Combustion dracut module is invoked after the
   <literal>ignition.firstboot</literal> argument is passed to the kernel
   command line. Combustion then reads the configuration from
   <filename>script</filename>. Combustion tries to configure the network if the
   network flag has been found in <filename>script</filename>. After
   <literal>/sysroot</literal> is mounted, Combustion tries to activate all
   mount points in <filename>/etc/fstab</filename> and then call
   <command>transactional-update</command> to apply other changes (like setting
   &rootuser; password or installing packages).
  </para>

  <para>
   When using Combustion, you need to label the configuration device with the
   name <literal>combustion</literal>, create a specific directory structure in
   that configuration medium, and include a configuration file named
   <filename>script</filename>. In the root directory of the configuration
   medium, create a directory called <filename>combustion</filename> and place
   the <filename>script</filename> into this directory along with other
   files&mdash;SSH key, configuration files, etc. The directory structure then
   should look as follows:
  </para>

<screen>
&lt;root directory&gt;
└── combustion
    └── script
    └── other files

	</screen>

  <para>
   You can use Combustion to configure your QEMU/KVM virtual machine. In this
   case, pass the location of the <filename>script</filename> file using the
   <literal>fw_cfg</literal> parameter of the <command>qemu</command> command:
  </para>

<screen>
	-fw_cfg name=opt/org.opensuse.combustion/script,file=/var/combustion-script
	</screen>

  <para>
   Combustion can be used along with Ignition. If you intend to do so, label
   your configuration medium <literal>ignition</literal> and include the
   <filename>ignition</filename> directory with the
   <filename>config.ign</filename> to your directory structure, as shown below:
  </para>

<screen>
&lt;root directory&gt;
└── combustion
    └── script
    └── other files
└── ignition 
    └── config.ign
	</screen>

  <para>
   In this scenario, Ignition runs before Combustion.
  </para>
 
 <section xml:id="sec-combustion-script">
  <title>The <filename>script</filename> configuration file</title>

  <para>
   The <filename>script</filename> configuration file is a set of commands that
   are executed on your system in a transactional-update shell. This section
   provides examples for performing various configuration tasks by using
   Combustion.
  </para>

  <important>
   <title>Include interpreter declaration</title>
   <para>
    As the <filename>script</filename> file is interpreted by shell, 
    start the file with the interpreter declaration on the first line. 
    For example, for Bash:
   </para>
<screen>
 #!/bin/bash
 </screen>
  </important>

  <para>
   To log in to your system, include at least the &rootuser;
   password. However, it is recommended to establish the authentication using SSH
   keys. If you need to use a &rootuser; password, make sure to configure a
   secure password. If you use a randomly generated password, use at least
   10 characters. If you create your password manually, use even more than 10
   characters and combine uppercase and lowercase letters, and numbers.
  </para>

  <section xml:id="sec-script-network">
   <title>Network configuration</title>
   <para>
    To configure and use the network connection during the first boot, add the
    following statement to your <filename>script</filename>:
   </para>
<screen>
 # combustion: network
 </screen>
   <para>
    Using this statement will pass the <literal>rd.neednet=1</literal> argument
    to dracut. If you do not use the statement, the system will be configured
    without any network connection.
   </para>
  </section>
  <section xml:id="combustion-prepare-statement">
   <title>Performing modifications in the initramfs</title>
   <para>
     You may need to perform changes to the initramfs environment, for
     example, to write a custom network configuration for &nm; into
     <filename>/etc/NetworkManager/system-connections/</filename>. To do so,
     use the <literal>prepare</literal> statement.
   </para>
   <para>
     For example, to create a connection with a static IP address and
     configure DNS:
   </para>
<screen>
#!/bin/bash
# combustion: network prepare
set -euxo pipefail

nm_config() {
umask 077 # Required for NM config
mkdir -p /etc/NetworkManager/system-connections/
cat &gt;/etc/NetworkManager/system-connections/static.nmconnection &lt;&lt;-EOF
[connection]
id=static
type=ethernet
autoconnect=true

[ipv4]
method=manual
dns=192.168.100.1
address1=192.168.100.42/24,192.168.100.1
EOF
}

if [ "${1-}" = "--prepare" ]; then
nm_config # Configure NM in the initrd
exit 0
fi

# Redirect output to the console
exec &gt; &gt;(exec tee -a /dev/tty0) 2&gt;&amp;1

nm_config # Configure NM in the system
curl example.com

# Close outputs and wait for tee to finish
exec 1&gt;&amp;- 2&gt;&amp;-; wait;

# Leave a marker
echo "Configured with combustion" &gt; /etc/issue.d/combustion</screen>
 </section>

 <section xml:id="combustion-script-wait">
  <title>Waiting for the task to complete</title>
  <para>
    Some processes may be run in background, for example, the <command>tee</command> process
    that redirects output to the terminal. To ensure that all running processes are completed before the
    <filename>script</filename>
    execution finishes, add the following line:
  </para>
  <screen>exec 1&gt;&amp;- 2&gt;&amp;-; wait;</screen>
</section>

  <section xml:id="sec-script-partitioning">
   <title>Partitioning</title>
   <para>
    &slema; raw images are delivered with a default partitioning scheme as
    described in <xref linkend="sec-default-partitioning"/>. You might want to
    use a different partitioning. The following set of example snippets moves the
    <filename>/home</filename> to a different partition.
   </para>
   <note>
    <title>Performing changes outside of directories included in snapshots</title>
    <para>
     The following script performs changes that are not included in snapshots.
     If the script fails and the snapshot is discarded, some changes remain
     visible and cannot be reverted (like the changes to the
     <literal>/dev/vdb</literal> device.)
    </para>
   </note>
   <para>
    The following snippet creates a GPT with a single partition on the
    <literal>/dev/vdb</literal> device:
   </para>
<screen>
sfdisk /dev/vdb &lt;&lt;EOF
label: gpt
type=linux
EOF 

partition=/dev/vdb1
   </screen>
   <para>
    The partition is formatted to Btrfs:
   </para>
<screen>
wipefs --all ${partition}
mkfs.btrfs ${partition} 
   </screen>
   <para>
    Possible content of <filename>/home</filename> is moved to the new
    <filename>/home</filename> folder location by the following snippet:
   </para>
<screen>
mount /home
mount ${partition} /mnt 
rsync -aAXP /home/ /mnt/
umount /home /mnt
   </screen>
   <para>
    The snippet below removes an old entry in <filename>/etc/fstab</filename>
    and creates a new entry:
   </para>
<screen>
awk -i inplace '$2 != "/home"' /etc/fstab
echo "$(blkid -o export ${partition} | grep ^UUID=) /home btrfs defaults 0 0" >>/etc/fstab
   </screen>
  </section>

  <section xml:id="sec-cript-security">
   <title>Setting a password for &rootuser;</title>
   <para>
    Before you set the &rootuser; password, generate a hash of the password,
    for example, by using the <command>openssl passwd -6</command>. To set the
    password, add the following to your <filename>script</filename>:
   </para>
<screen>
 echo 'root:$5$.wn2BZHlEJ5R3B1C$TAHEchlU.h2tvfOpOki54NaHpGYKwdNhjaBuSpDotD7' | chpasswd -e
 </screen>
  </section>

  <section xml:id="sec-script-sshkeys">
   <title>Adding SSH keys</title>
   <para>
    The following snippet creates a directory to store the &rootuser;'s SSH key
    and then copies the public SSH key located on the configuration device to
    the <filename>authorized_keys</filename> file.
   </para>
<screen>
 mkdir -pm700 /root/.ssh/
cat id_rsa_new.pub >> /root/.ssh/authorized_keys
 </screen>
   <note>
    <para>
     The SSH service must be enabled in case you need to use remote login via
     SSH. For details, refer to <xref linkend="sec-script-services"/>.
    </para>
   </note>
  </section>

  <section xml:id="sec-script-services">
   <title>Enabling services</title>
   <para>
    You may need to enable some services, for example, the SSH service. To
    enable the SSH service, add the following line to
    <filename>script</filename>:
   </para>
<screen>
 systemctl enable sshd.service
 </screen>
  </section>

  <section xml:id="sec-script-install">
   <title>Installing packages</title>
   <important>
    <title>Network connection and registering your system might be necessary</title>
    <para>
     As some packages may require additional subscription, you might need to
     register your system beforehand. An available network connection may also be
     needed to install additional packages.
    </para>
   </important>
   <para>
    During the first boot configuration, you can install additional packages to
    your system. For example, you can install the <literal>vim</literal> editor
    by adding:
   </para>
<screen>
zypper --non-interactive install vim-small
 </screen>
   <note>
    <para>
     Bear in mind that you cannot use <command>zypper</command>
     after the configuration is complete and you boot to the configured system.
     To perform changes later, you must use the
     <command>transactional-update</command> command to create a changed
     snapshot. For details, refer to <xref linkend="sec-transactional-udate"/>.
    </para>
   </note>
  </section>
 </section>
</section>
  
  <section xml:id="sec-raw-preparation">
    <title>Preparing the raw image</title>
    <para>
    To prepare the raw image, proceed as follows:
   </para> 
   <procedure xml:id="proc-prepare-image">
    <title>Preparing the raw disk image</title>
    <step>
     <para>
      Download the raw image and decompress it:
     </para>
  <screen>&prompt.user;xz -d <replaceable>DOWNLOADED_IMAGE.raw.xz</replaceable></screen>
    </step>
    <step>
     <para>
      Copy the decompressed image to the device where &slema; will run:
     </para>
  <screen>&prompt.user;dd if=<replaceable>DOWNLOADED_IMAGE.raw</replaceable> of=/dev/sd<replaceable>X</replaceable></screen>
    </step>
   </procedure>
  </section>

  <section xml:id="sec-jeos-firstboot">
    <title>Minimal initial configuration</title>
    <para>
      If you do not attach any configuration device when booting the raw image for the first time, <emphasis>jeos-firstboot</emphasis> enables you to perform minimal configuration of your system as follows:
    </para>
    <procedure>
      <title>Configuring the system using <emphasis>jeos-firstboot</emphasis></title>
      <step>
        <para>
          Confirm the configuration.
        </para>
        <informalfigure>
        <mediaobject>
          <imageobject role="fo">
     <imagedata  fileref="slemicro_jeos_start.png" width="100&#37;"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="slemicro_jeos_start.png" width="100&#37;"/>
    </imageobject>
    <textobject role="description"><phrase>jeos first boot</phrase>
    </textobject>
        </mediaobject>
      </informalfigure>
      </step>
      <step>
        <para>
          Select your keyboard layout and confirm your selection.
        </para>
        <informalfigure>
        <mediaobject>
          <imageobject role="fo">
     <imagedata  fileref="slemicro_jeos_keyboard.png" width="100&#37;"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="slemicro_jeos_keyboard.png" width="100&#37;"/>
    </imageobject>
    <textobject role="description"><phrase>jeos keyboard selection</phrase>
    </textobject>
        </mediaobject>
      </informalfigure>
      </step>
      <step>
        <para>
          Read the license agreement and accept it.
        </para>
        <informalfigure>
        <mediaobject>
          <imageobject role="fo">
     <imagedata  fileref="slemicro_jeos_eula.png" width="100&#37;"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="slemicro_jeos_eula.png" width="100&#37;"/>
    </imageobject>
    <textobject role="description"><phrase>jeos EULA</phrase>
    </textobject>
        </mediaobject>
      </informalfigure>
      </step>
      <step>
        <para>
          Select your time zone.
        </para>
        <informalfigure>
        <mediaobject>
          <imageobject role="fo">
     <imagedata  fileref="slemicro_jeos_timezone.png" width="100&#37;"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="slemicro_jeos_timezone.png" width="100&#37;"/>
    </imageobject>
    <textobject role="description"><phrase>jeos time zone selection</phrase>
    </textobject>
        </mediaobject>
      </informalfigure>
      </step>
      <step>
        <para>
          Enter a password for &rootuser;.
        </para>
        <informalfigure>
        <mediaobject>
          <imageobject role="fo">
     <imagedata  fileref="slemicro_jeos_password.png" width="100&#37;"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="slemicro_jeos_password.png" width="100&#37;"/>
    </imageobject>
    <textobject role="description"><phrase>root password</phrase>
    </textobject>
     </mediaobject>
   </informalfigure>
   </step>
   <step>
    <para>
      Confirm the &rootuser; password.
    </para>
    <informalfigure>
    <mediaobject>
      <imageobject role="fo">
     <imagedata  fileref="slemicro_jeos_password_confirm.png" width="100&#37;"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="slemicro_jeos_password_confirm.png" width="100&#37;"/>
    </imageobject>
    <textobject role="description"><phrase>root password confirmation</phrase>
    </textobject>
        </mediaobject>
      </informalfigure>
      </step>
      <step>
        <para>
          Accept the statement about &slema; registration.
        </para>
        <informalfigure>
        <mediaobject>
          <imageobject role="fo">
     <imagedata  fileref="slemicro_jeos_statement.png" width="100&#37;"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="slemicro_jeos_statement.png" width="100&#37;"/>
    </imageobject>
    <textobject role="description"><phrase>root password</phrase>
    </textobject>
        </mediaobject>
      </informalfigure>
      </step>
    </procedure>
  </section>
</chapter>
